{"name":"Timerjs","tagline":"Give a timer to your callbacks !","body":"TimerJS\r\n=========\r\n\r\nTimerJS lets you give a timeout to your callback.\r\n\r\nIn some cases, a callback may be called only after inner callbacks resolutions, when you are using async.each() for instance.\r\nI found it would be clever <strong>in some specific cases</strong> to be able to give a timeout to the inner callbacks in order to ensure your script will not run\r\n\"forever\" if a inner callback takes too much time to be called.\r\n\r\nTimerJS works in the browser and in NodeJS.\r\n\r\nAll you have to do is include the script, and then\r\n\r\n````javascript\r\nasyncFunction(arg, timer(callback, 100));\r\n````\r\nThe callback will be called after 100 milliseconds, if it have been not called yet.\r\n\r\nTo use in browser environement \r\n````javascript\r\n<script type='javascript' src='timerjs.js' />\r\n````\r\nIn nodeJS \r\n\r\nInstallation\r\n\r\n````javascript\r\nnpm install timerjs\r\n````\r\n\r\nThen \r\n````javascript\r\nvar timer = require('timerjs');\r\n````\r\n\r\n### Usecases \r\nObviously, timerJS should not be used if the data returned by your callback is very important. You should use it when\r\nthe lack of the data doesn't affect the global behaviour of your script.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}